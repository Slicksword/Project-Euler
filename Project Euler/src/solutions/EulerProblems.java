package solutions;

/**
 * 
 * @author jonathan
 * 
 */
public final class EulerProblems {

	private EulerProblems() {
		// Singleton instance
	}

	private static class EulerProblemsSingleton {
		public static final EulerProblems INSTANCE = new EulerProblems();
	}

	public static EulerProblems getInstance() {
		return EulerProblemsSingleton.INSTANCE;
	}

	/**
	 * If we list all the natural numbers below 10 that are multiples of 3 or 5,
	 * we get 3, 5, 6 and 9. The sum of these multiples is 23.
	 * 
	 * Find the sum of all the multiples of 3 or 5 below 1000.
	 * 
	 * @return The sum of all multiples of 3 or 5 less than 1000.
	 */
	public int problem1() {
		int sum = 0;

		// Sum all the multiples of 3 less than 1000
		for (int index = 1; index < 334; ++index) {
			sum += index * 3;
		}

		// Sum all the multiples of 5 less than 1000, unless it's also a
		// multiple of 3
		for (int index = 1; index < 200; ++index) {
			int product = index * 5;
			if (product % 15 != 0)
				sum += product;
		}

		return sum;
	}

	/**
	 * Each new term in the Fibonacci sequence is generated by adding the
	 * previous two terms. By starting with 1 and 2, the first 10 terms will be:
	 * 
	 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	 * 
	 * By considering the terms in the Fibonacci sequence whose values do not
	 * exceed four million, find the sum of the even-valued terms.
	 * 
	 * @return Sum of even numbered terms of the Fibonnacci sequence less than
	 *         4,000,000
	 */
	public int problem2() {
		int termMinusTwo = 2;
		int termMinusOne = 8;
		int currTerm = 34;

		int sum = termMinusTwo + termMinusOne;

		// This solution is based on the fact that the even-digit terms in the
		// Fibonacci sequence follow the pattern E(n) = 4 * E(n-1) + E(n-2).
		while (currTerm < 4000000) {
			sum += currTerm;

			int tempTerm = currTerm;

			// Update the new terms in the sequence
			currTerm = 4 * currTerm + termMinusOne;
			termMinusTwo = termMinusOne;
			termMinusOne = tempTerm;
		}
		
		return sum;
	}
}
